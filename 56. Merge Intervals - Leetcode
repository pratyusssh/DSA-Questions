class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        /* Here, first understand if the array gieven is sorted or not
        If its not make it sorted.
        Now, you see that [1,3] and [2,6] can be merged as 2 is in [1,3]
        Check for all intrvals that merge with ith interval and merge it all.
        A linear scan for every interval is done.
        This is brute force. This will have O(nlogn) + O(n2) t-c */
        
        /* For a faster approach, you compare pairs and then store it into a new
        Data Structure. Do this repeatedly and the pair left at last is also added
        to the DS.
        TC = nlogn+n*/
        
        vector<vector<int>> mergedIntervals;
        
        if(intervals.size()==0)
            return mergedIntervals;
        
        sort(intervals.begin(),intervals.end());
        vector<int> tempIntervals = intervals[0];
        
        for(auto it:intervals){
            if(it[0]<=tempIntervals[1]){
                tempIntervals[1] = max(it[1],tempIntervals[1]);
            }     else{
                mergedIntervals.push_back(tempIntervals);
                tempIntervals = it;
            }   
        
        }
        mergedIntervals.push_back(tempIntervals);
        return mergedIntervals;
    }
};
